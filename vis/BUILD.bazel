load("@emsdk//emscripten_toolchain:wasm_rules.bzl", "wasm_cc_binary")

COPTS = []  #["-pthread"]

BASE_LINKOPTS = [
    # "-pthread",
    "--bind",  # Enable embind
    # "-sUSE_PTHREADS",
    "-sMODULARIZE",
    "-sEXPORT_ES6",
    # "-sPTHREAD_POOL_SIZE=navigator.hardwareConcurrency",
    "--pre-js",
    "$(location hello_embind_interface.js)",
]

RELEASE_LINKOPTS = [
    "--closure=1",  # Run the closure compiler
    # Tell closure about the externs file, so as not to minify our JS public API.
    "--closure-args=--externs=$(location hello_embind_externs.js)",
]

DEBUG_LINKOPTS = [
    "--closure=0",  # Do not use closure
]

config_setting(
    name = "release_opts",
    values = {"compilation_mode": "opt"},
)

config_setting(
    name = "debug_opts",
    values = {"compilation_mode": "dbg"},
)

cc_binary(
    name = "shim",
    srcs = ["shim.cpp"],
    additional_linker_inputs = [
        "hello_embind_externs.js",
        "hello_embind_interface.js",
    ],
    copts = COPTS,
    features = ["emcc_debug_link"],
    linkopts = select({
        ":debug_opts": BASE_LINKOPTS + DEBUG_LINKOPTS,
        ":release_opts": BASE_LINKOPTS + RELEASE_LINKOPTS,
        "//conditions:default": BASE_LINKOPTS + RELEASE_LINKOPTS,
    }),
    # This target won't build successfully on its own because of missing emscripten
    # headers etc. Therefore, we hide it from wildcards.
    tags = ["manual"],
    deps = ["//:rrt_star"],
)

wasm_cc_binary(
    name = "shim_wasm",
    cc_target = ":shim",
)
